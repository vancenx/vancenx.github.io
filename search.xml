<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL 实战</title>
      <link href="/2019/04/06/mysql-shi-zhan/"/>
      <url>/2019/04/06/mysql-shi-zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="项目七-各部门工资最高的员工（难度：中等）"><a href="#项目七-各部门工资最高的员工（难度：中等）" class="headerlink" title="项目七: 各部门工资最高的员工（难度：中等）"></a>项目七: 各部门工资最高的员工（难度：中等）</h2><p>创建Employee 表，包含所有员工信息，每个员工有其对应的 Id, salary 和 department Id。</p><pre><code>+----+-------+--------+--------------+| Id | Name  | Salary | DepartmentId |+----+-------+--------+--------------+| 1  | Joe   | 70000  | 1            || 2  | Henry | 80000  | 2            || 3  | Sam   | 60000  | 2            || 4  | Max   | 90000  | 1            |+----+-------+--------+--------------+</code></pre><p>创建Department 表，包含公司所有部门的信息。</p><pre><code>+----+----------+| Id | Name     |+----+----------+| 1  | IT       || 2  | Sales    |+----+----------+</code></pre><p>编写一个 SQL 查询，找出每个部门工资最高的员工。例如，根据上述给定的表格，Max 在 IT 部门有最高工资，Henry 在 Sales 部门有最高工资。</p><pre><code>+------------+----------+--------+| Department | Employee | Salary |+------------+----------+--------+| IT         | Max      | 90000  || Sales      | Henry    | 80000  |+------------+----------+--------+</code></pre><h2 id="项目八-换座位（难度：中等）"><a href="#项目八-换座位（难度：中等）" class="headerlink" title="项目八: 换座位（难度：中等）"></a>项目八: 换座位（难度：中等）</h2><p>小美是一所中学的信息科技老师，她有一张 seat 座位表，平时用来储存学生名字和与他们相对应的座位 id。</p><p>其中纵列的 <strong>id</strong> 是连续递增的</p><p>小美想改变相邻俩学生的座位。</p><p>你能不能帮她写一个 SQL query 来输出小美想要的结果呢？</p><p> 请创建如下所示seat表：</p><pre><code>**示例：**+---------+---------+|    id   | student |+---------+---------+|    1    | Abbot   ||    2    | Doris   ||    3    | Emerson ||    4    | Green   ||    5    | Jeames  |+---------+---------+</code></pre><p>假如数据输入的是上表，则输出结果如下：</p><pre><code>+---------+---------+|    id   | student |+---------+---------+|    1    | Doris   ||    2    | Abbot  ||    3    | Green   ||    4    | Emerson ||    5    | Jeames  |+---------+---------+</code></pre><p><strong>注意：</strong></p><p>如果学生人数是奇数，则不需要改变最后一个同学的座位。</p><h2 id="项目九-分数排名（难度：中等）"><a href="#项目九-分数排名（难度：中等）" class="headerlink" title="项目九:  分数排名（难度：中等）"></a>项目九:  分数排名（难度：中等）</h2><p>编写一个 SQL 查询来实现分数排名。如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。</p><p>创建以下score表：</p><pre><code>+----+-------+| Id | Score |+----+-------+| 1  | 3.50  || 2  | 3.65  || 3  | 4.00  || 4  | 3.85  || 5  | 4.00  || 6  | 3.65  |+----+-------+</code></pre><p>例如，根据上述给定的 Scores 表，你的查询应该返回（按分数从高到低排列）：</p><pre><code>+-------+------+| Score | Rank |+-------+------+| 4.00  | 1    || 4.00  | 1    || 3.85  | 2    || 3.65  | 3    || 3.65  | 3    || 3.50  | 4    |+-------+------+</code></pre><h2 id="项目十：行程和用户（难度：困难）"><a href="#项目十：行程和用户（难度：困难）" class="headerlink" title="项目十：行程和用户（难度：困难）"></a>项目十：行程和用户（难度：困难）</h2><p>Trips 表中存所有出租车的行程信息。每段行程有唯一键 Id，Client_Id 和 Driver_Id 是 Users 表中 Users_Id 的外键。Status 是枚举类型，枚举成员为 (‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’)。</p><pre><code>+----+-----------+-----------+---------+--------------------+----------+| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|+----+-----------+-----------+---------+--------------------+----------+| 1  |     1     |    10     |    1    |     completed      |2013-10-01|| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|| 3  |     3     |    12     |    6    |     completed      |2013-10-01|| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|| 5  |     1     |    10     |    1    |     completed      |2013-10-02|| 6  |     2     |    11     |    6    |     completed      |2013-10-02|| 7  |     3     |    12     |    6    |     completed      |2013-10-02|| 8  |     2     |    12     |    12   |     completed      |2013-10-03|| 9  |     3     |    10     |    12   |     completed      |2013-10-03| | 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|+----+-----------+-----------+---------+--------------------+----------+</code></pre><p>Users 表存所有用户。每个用户有唯一键 Users_Id。Banned 表示这个用户是否被禁止，Role 则是一个表示（‘client’, ‘driver’, ‘partner’）的枚举类型。</p><pre><code>+----------+--------+--------+| Users_Id | Banned |  Role  |+----------+--------+--------+|    1     |   No   | client ||    2     |   Yes  | client ||    3     |   No   | client ||    4     |   No   | client ||    10    |   No   | driver ||    11    |   No   | driver ||    12    |   No   | driver ||    13    |   No   | driver +----------+--------+--------+</code></pre><p>写一段 SQL 语句查出 <strong>2013年10月1日</strong> 至 <strong>2013年10月3日</strong> 期间非禁止用户的取消率。基于上表，你的 SQL 语句应返回如下结果，取消率（Cancellation Rate）保留两位小数。</p><pre><code>+------------+-------------------+|     Day    | Cancellation Rate |+------------+-------------------+| 2013-10-01 |       0.33        || 2013-10-02 |       0.00        || 2013-10-03 |       0.50        |+------------+-------------------+</code></pre><h2 id="项目十一：各部门前3高工资的员工（难度：中等）"><a href="#项目十一：各部门前3高工资的员工（难度：中等）" class="headerlink" title="项目十一：各部门前3高工资的员工（难度：中等）"></a>项目十一：各部门前3高工资的员工（难度：中等）</h2><p>将项目7中的employee表清空，重新插入以下数据（其实是多插入5,6两行）：</p><pre><code>+----+-------+--------+--------------+| Id | Name  | Salary | DepartmentId |+----+-------+--------+--------------+| 1  | Joe   | 70000  | 1            || 2  | Henry | 80000  | 2            || 3  | Sam   | 60000  | 2            || 4  | Max   | 90000  | 1            || 5  | Janet | 69000  | 1            || 6  | Randy | 85000  | 1            |+----+-------+--------+--------------+</code></pre><p>编写一个 SQL 查询，找出每个部门工资前三高的员工。例如，根据上述给定的表格，查询结果应返回：</p><pre><code>+------------+----------+--------+| Department | Employee | Salary |+------------+----------+--------+| IT         | Max      | 90000  || IT         | Randy    | 85000  || IT         | Joe      | 70000  || Sales      | Henry    | 80000  || Sales      | Sam      | 60000  |+------------+----------+--------+</code></pre><p>此外，请考虑实现各部门前N高工资的员工功能。</p><h2 id="项目十二-分数排名-（难度：中等）"><a href="#项目十二-分数排名-（难度：中等）" class="headerlink" title="项目十二  分数排名 - （难度：中等）"></a>项目十二  分数排名 - （难度：中等）</h2><p>依然是那张分数表，实现排名功能，但是排名是非连续的，如下：</p><pre><code>+-------+------+| Score | Rank |+-------+------+| 4.00  | 1    || 4.00  | 1    || 3.85  | 3    || 3.65  | 4    || 3.65  | 4    || 3.50  | 6    |+-------+------</code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 数据导入导出</title>
      <link href="/2019/04/06/mysql-shu-ju-dao-ru-dao-chu/"/>
      <url>/2019/04/06/mysql-shu-ju-dao-ru-dao-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="数据导入导出"><a href="#数据导入导出" class="headerlink" title="数据导入导出"></a>数据导入导出</h2><h3 id="将MySQL表导出到CSV文件"><a href="#将MySQL表导出到CSV文件" class="headerlink" title="将MySQL表导出到CSV文件"></a>将MySQL表导出到CSV文件</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> world <span class="token keyword">INTO</span> <span class="token keyword">OUTFILE</span> <span class="token string">'E:/mysql-8.0.15-winx64/world.csv'</span><span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">','</span> <span class="token keyword">ENCLOSED BY</span> <span class="token string">'"'</span><span class="token keyword">LINES</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">'\r\n'</span><span class="token punctuation">;</span></code></pre><ul><li>该语句在<code>E:/mysql-8.0.15-winx64/</code>目录下创建一个包含结果集，名称为<code>world.csv</code>的CSV文件。</li><li>CSV文件包含结果集中的行集合。每行由一个回车序列和由<code>LINES TERMINATED BY &#39;\r\n&#39;</code>子句指定的换行字符终止。文件中的每行包含表的结果集的每一行记录。</li><li>每个值由<code>FIELDS ENCLOSED BY &#39;&quot;&#39;</code>子句指示的双引号括起来。 这样可以防止可能包含逗号(<code>，</code>)的值被解释为字段分隔符。 当用双引号括住这些值时，该值中的逗号不会被识别为字段分隔符。</li></ul><p>运行时出现了以下<strong>错误</strong>：</p><p><code>ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</code></p><p>查看官方文档，<code>secure_file_priv</code>参数用于限制LOAD DATA, SELECT …OUTFILE, LOAD_FILE()传到哪个指定目录。</p><ul><li>secure_file_priv 为 NULL 时，表示限制mysqld不允许导入或导出。</li><li>secure_file_priv 为 /tmp 时，表示限制mysqld只能在/tmp目录中执行导入导出，其他目录不能执行。</li><li>secure_file_priv 没有值时，表示不限制mysqld在任意目录的导入导出。</li></ul><p>查看 <strong>secure_file_priv</strong> 的值，默认为NULL，表示限制不能导入导出。</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">'%secure_file_priv%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+-------+</span><span class="token operator">|</span> Variable_name    <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+-------+</span><span class="token operator">|</span> secure_file_priv <span class="token operator">|</span> <span class="token boolean">NULL</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment" spellcheck="true">------------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span></code></pre><p><strong>解决方法</strong>：</p><ul><li>打开安装目录下的 my.ini，在最后加入以下语句后保存。</li></ul><p><code>secure_file_priv=&#39;&#39;</code></p><ul><li>打开 任务管理器>服务，找到MySQL,右键重新启动。</li></ul><p>修改后再次执行，成功导出CSV。</p><p><img src="https://raw.githubusercontent.com/vancenx/mdpic/master/20190406203949.png" alt></p><h3 id="将CSV文件导出到MySQL表"><a href="#将CSV文件导出到MySQL表" class="headerlink" title="将CSV文件导出到MySQL表"></a>将CSV文件导出到MySQL表</h3><p>在导入文件操作之前，需要准备以下内容：</p><ul><li>将要导入文件的数据对应的数据库表。</li><li>准备好一个CSV文件，其数据与表的列数和每列中的数据类型相匹配。</li><li>连接到MySQL数据库服务器的帐户具有<code>FILE</code>和<code>INSERT</code>权限。</li></ul><p>创建World表：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> World <span class="token punctuation">(</span>name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>continent <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>area <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>population <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>gdp <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以下是<code>world.csv</code>文件的内容</p><p><img src="https://raw.githubusercontent.com/vancenx/mdpic/master/20190406210105.png" alt></p><p>以下语句将数据从<code>E:/mysql-8.0.15-winx64/world.csv</code>文件导入到World表。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">LOAD</span> <span class="token keyword">DATA</span> <span class="token keyword">INFILE</span> <span class="token string">'E:/mysql-8.0.15-winx64/world.csv'</span> <span class="token keyword">INTO</span> <span class="token keyword">TABLE</span> World <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">','</span><span class="token keyword">ENCLOSED BY</span> <span class="token string">'"'</span><span class="token keyword">LINES</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">'\n'</span><span class="token punctuation">;</span></code></pre><p>文件的字段由<code>FIELD TERMINATED BY &#39;,&#39;</code>指示的逗号终止，并由<code>ENCLOSED BY &#39;&quot;&#39;</code>指定的双引号括起来。</p><p>运行时出现了以下<strong>错误</strong>：</p><p><code>1265 - Data truncated for column &#39;gdp&#39; at row 1</code></p><p>有时候,这是因为数据类型的不对应,或者字符串长度不够而造成的。但是,经过排查，并不是这个原因。</p><p>后来发现是回车换行<code>\r\n</code>作怪，之前将MySQL表导出到CSV文件使用了<code>LINES TERMINATED BY &#39;\r\n&#39;</code>，所以在导入时也应相同。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">LOAD</span> <span class="token keyword">DATA</span> <span class="token keyword">INFILE</span> <span class="token string">'E:/mysql-8.0.15-winx64/world.csv'</span> <span class="token keyword">INTO</span> <span class="token keyword">TABLE</span> World <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">','</span><span class="token keyword">ENCLOSED BY</span> <span class="token string">'"'</span><span class="token keyword">LINES</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">'\r\n'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">--此处更正</span></code></pre><p>成功导入：</p><p><img src="https://raw.githubusercontent.com/vancenx/mdpic/master/20190406211938.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 基础- 表联结</title>
      <link href="/2019/04/04/mysql-ji-chu-biao-lian-jie/"/>
      <url>/2019/04/04/mysql-ji-chu-biao-lian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-MySQL别名"><a href="#1-MySQL别名" class="headerlink" title="1.MySQL别名"></a>1.MySQL别名</h2><ul><li><strong>为表取别名</strong><br>查询数据时，如果表名很长，使用起来不方便，此时，就可以为表取一个别名，用这个别名来代替表的名称 。</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">AS</span><span class="token punctuation">]</span> 别名； <span class="token comment" spellcheck="true">--注意，为表指定别名，AS关键字可以省略不写</span></code></pre><ul><li><strong>为字段取别名</strong><br>在查询数据时，为了使显示的查询结果更加直观，可以为字段取一个别名 。</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> 字段名 <span class="token punctuation">[</span><span class="token keyword">AS</span><span class="token punctuation">]</span> 别名 <span class="token punctuation">[</span>，字段名 <span class="token punctuation">[</span><span class="token keyword">AS</span><span class="token punctuation">]</span> 别名，……<span class="token punctuation">]</span> <span class="token keyword">FROM</span> 表名； <span class="token comment" spellcheck="true">--注意，为字段指定别名，AS关键字可以省略不写</span></code></pre><h2 id="2-INNER-JOIN"><a href="#2-INNER-JOIN" class="headerlink" title="2.INNER JOIN"></a>2.INNER JOIN</h2><p>INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。</p><p><img src="https://raw.githubusercontent.com/vancenx/mdpic/master/20190406132047.png" alt></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> TableA <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> TableB <span class="token keyword">ON</span> TableA<span class="token punctuation">.</span>name <span class="token operator">=</span> TableB<span class="token punctuation">.</span>name；</code></pre><blockquote><p>MySQL的INNER JOIN 也可以省略 INNER 使用 JOIN，效果一样。</p></blockquote><h2 id="3-LEFT-JOIN"><a href="#3-LEFT-JOIN" class="headerlink" title="3.LEFT JOIN"></a>3.LEFT JOIN</h2><p>MySQL left join 与 join 有所不同。 MySQL LEFT JOIN 会读取左边数据表的全部数据，即便右边表无对应数据。如果右表中没有匹配，则结果为 NULL。</p><p><img src="https://raw.githubusercontent.com/vancenx/mdpic/master/20190406132212.png" alt></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> TableA <span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> TableB <span class="token keyword">ON</span> TableA<span class="token punctuation">.</span>name <span class="token operator">=</span> TableB<span class="token punctuation">.</span>name；</code></pre><blockquote><p>注释：MySQL中 LEFT JOIN 和 LEFT OUTER JOIN 两者等价，推荐使用 left join。</p></blockquote><p>##　４.CROSS JOIN</p><p>CROSS JOIN 把表A和表B的数据进行一个N*M的组合，即笛卡尔积。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> TableA <span class="token keyword">CROSS</span> <span class="token keyword">JOIN</span> TableB ；</code></pre><blockquote><p>笛卡尔（Descartes）乘积又叫直积。假设集合A={a,b}，集合B={0,1,2}，则两个集合的笛卡尔积为{(a,0),(a,1),(a,2),(b,0),(b,1), (b,2)}。可以扩展到多个集合的情况。类似的例子有，如果A表示某学校学生的集合，B表示该学校所有课程的集合，则A与B的笛卡尔积表示所有可能的选课情况。</p></blockquote><p>实际上，在 MySQL 中（仅限于 MySQL） CROSS JOIN 与 INNER JOIN 的表现是一样的，在不指定 ON 条件得到的结果都是笛卡尔积，反之取得两个表完全匹配的结果。<br>INNER JOIN 与 CROSS JOIN 可以省略 INNER 或 CROSS 关键字，因此下面的 SQL 效果是一样的：</p><pre class=" language-sql"><code class="language-sql"> <span class="token keyword">FROM</span> table1 <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> table2 <span class="token keyword">FROM</span> table1 <span class="token keyword">CROSS</span> <span class="token keyword">JOIN</span> table2 <span class="token keyword">FROM</span> table1 <span class="token keyword">JOIN</span> table2</code></pre><h2 id="５-自连接"><a href="#５-自连接" class="headerlink" title="５.自连接"></a>５.自连接</h2><p>自连接就是一个表和它自身进行连接，是多表连接的特殊情况。<br>在自连接查询中，要先在FROM字句中为表分别定义两个不同的别名，然后使用这两个别名写出一个连接条件，条件比较在同一个表中的情况。</p><p>示例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span>    <span class="token number">c1</span><span class="token punctuation">.</span>CouNo 课程编号<span class="token punctuation">,</span>    <span class="token number">c1</span><span class="token punctuation">.</span>CouName 课程名称<span class="token punctuation">,</span>    <span class="token number">c1</span><span class="token punctuation">.</span>Kind 课程类别<span class="token punctuation">,</span>    <span class="token number">c1</span><span class="token punctuation">.</span>DepartNo 系部编号 <span class="token keyword">FROM</span>    Course <span class="token number">c1</span>    <span class="token keyword">JOIN</span> Course <span class="token number">c2</span> <span class="token keyword">ON</span> <span class="token number">c1</span><span class="token punctuation">.</span>Kind <span class="token operator">=</span> <span class="token number">c2</span><span class="token punctuation">.</span>Kind     <span class="token operator">AND</span> <span class="token number">c1</span><span class="token punctuation">.</span>DepartNo <span class="token operator">!=</span> <span class="token number">c2</span><span class="token punctuation">.</span>DepartNo <span class="token keyword">ORDER</span> <span class="token keyword">BY</span>    <span class="token number">c1</span><span class="token punctuation">.</span>CouNo<span class="token punctuation">;</span></code></pre><h2 id="6-UNION"><a href="#6-UNION" class="headerlink" title="6.UNION"></a>6.UNION</h2><p>MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> expression1<span class="token punctuation">,</span> expression2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> expression_n    <span class="token keyword">FROM</span> <span class="token keyword">tables</span>    <span class="token punctuation">[</span><span class="token keyword">WHERE</span> conditions<span class="token punctuation">]</span>    <span class="token keyword">UNION</span> <span class="token punctuation">[</span><span class="token keyword">ALL</span> <span class="token operator">|</span> <span class="token keyword">DISTINCT</span><span class="token punctuation">]</span>    <span class="token keyword">SELECT</span> expression1<span class="token punctuation">,</span> expression2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> expression_n    <span class="token keyword">FROM</span> <span class="token keyword">tables</span>    <span class="token punctuation">[</span><span class="token keyword">WHERE</span> conditions<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><ul><li>参数：<ul><li>expression1, expression2, … expression_n: 要检索的列。</li><li>tables: 要检索的数据表。</li><li>WHERE conditions: 可选， 检索条件。</li><li>DISTINCT: 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响。</li><li>ALL: 可选，返回所有结果集，包含重复数据。</li></ul></li></ul><h2 id="7-以上几种方式的区别和联系"><a href="#7-以上几种方式的区别和联系" class="headerlink" title="7. 以上几种方式的区别和联系"></a>7. 以上几种方式的区别和联系</h2><blockquote><p>参考：</p></blockquote><ol><li><a href="http://www.zsythink.net/archives/1105" target="_blank" rel="noopener">http://www.zsythink.net/archives/1105</a></li><li><a href="http://justcode.ikeepstudying.com/2016/08/mysql-%E5%9B%BE%E8%A7%A3-inner-join%E3%80%81left-join%E3%80%81right-join%E3%80%81full-outer-join%E3%80%81union%E3%80%81union-all%E7%9A%84%E5%8C%BA%E5%88%AB/" target="_blank" rel="noopener">http://justcode.ikeepstudying.com/2016/08/mysql-图解-inner-join、left-join、right-join、full-outer-join、union、union-all的区别/</a></li></ol><h2 id="项目五：组合两张表-（难度：简单）"><a href="#项目五：组合两张表-（难度：简单）" class="headerlink" title="项目五：组合两张表 （难度：简单）"></a>项目五：组合两张表 （难度：简单）</h2><p>在数据库中创建表1和表2，并各插入三行数据（自己造）</p><p>表1: Person</p><p>+————-+———+</p><p>| 列名         | 类型     |</p><p>+————-+———+</p><p>| PersonId    | int     |</p><p>| FirstName   | varchar |</p><p>| LastName    | varchar |</p><p>+————-+———+</p><p>PersonId 是上表主键</p><p>表2: Address</p><p>+————-+———+</p><p>| 列名         | 类型    |</p><p>+————-+———+</p><p>| AddressId   | int     |</p><p>| PersonId    | int     |</p><p>| City        | varchar |</p><p>| State       | varchar |</p><p>+————-+———+</p><p>AddressId 是上表主键</p><p>编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息：FirstName, LastName, City, State</p><ol><li>创建表</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> person <span class="token punctuation">(</span>    PersonId <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    FirstName <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    LastName <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span> PersonID <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> address <span class="token punctuation">(</span>    AddressId <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    PersonId <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    City <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    State <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span> <span class="token number">20</span> <span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span> AddressId <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>插入数据</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> person <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Jean'</span><span class="token punctuation">,</span><span class="token string">'Leo'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">,</span><span class="token string">'Hanks'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Lily'</span><span class="token punctuation">,</span><span class="token string">'Allen'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> address <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">01</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Juneau'</span><span class="token punctuation">,</span><span class="token string">'Alaska'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">02</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Phoenix'</span><span class="token punctuation">,</span><span class="token string">'Arizona'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">03</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'Atlanta'</span><span class="token punctuation">,</span><span class="token string">'Georgia'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>查询语句<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> person<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> person<span class="token punctuation">.</span>LastName<span class="token punctuation">,</span> address<span class="token punctuation">.</span>City<span class="token punctuation">,</span> address<span class="token punctuation">.</span>State <span class="token keyword">FROM</span> person <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> address <span class="token keyword">ON</span> person<span class="token punctuation">.</span>PersonId <span class="token operator">=</span> address<span class="token punctuation">.</span>PersonId<span class="token punctuation">;</span>  </code></pre></li></ol><p>运行结果：</p><p><img src="https://raw.githubusercontent.com/vancenx/mdpic/master/20190406160802.png" alt></p><h2 id="项目六：删除重复的邮箱（难度：简单）"><a href="#项目六：删除重复的邮箱（难度：简单）" class="headerlink" title="项目六：删除重复的邮箱（难度：简单）"></a>项目六：删除重复的邮箱（难度：简单）</h2><p>编写一个 SQL 查询，来删除 email 表中所有重复的电子邮箱，重复的邮箱里只保留 <strong>Id</strong> <em>最小</em> 的那个。</p><p>+—-+———+</p><p>| Id | Email   |</p><p>+—-+———+</p><p>| 1  | <a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a> |</p><p>| 2  | <a href="mailto:c@d.com" target="_blank" rel="noopener">c@d.com</a> |</p><p>| 3  | <a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a> |</p><p>+—-+———+</p><p>Id 是这个表的主键。</p><p>例如，在运行你的查询语句之后，上面的 Person表应返回以下几行:</p><p>+—-+——————+</p><p>| Id | Email            |</p><p>+—-+——————+</p><p>| 1  | <a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a> |</p><p>| 2  | <a href="mailto:c@d.com" target="_blank" rel="noopener">c@d.com</a>  |</p><p>+—-+——————+</p><ol><li>创建表<pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> email <span class="token punctuation">(</span> ID <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> Email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>ID<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>插入数据<pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> email<span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a@b.com'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c@d.com'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a@b.com'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>查询语句<pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> t1 <span class="token keyword">FROM</span> email t1        <span class="token comment" spellcheck="true">--创建别名，进行自连接</span> <span class="token keyword">JOIN</span> email t2 <span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>ID <span class="token operator">></span> t2<span class="token punctuation">.</span>ID     <span class="token comment" spellcheck="true">--删除ID大的那条记录</span> <span class="token operator">AND</span> t1<span class="token punctuation">.</span>Email <span class="token operator">=</span> t2<span class="token punctuation">.</span>Email<span class="token punctuation">;</span></code></pre>运行结果：</li></ol><p><img src="https://raw.githubusercontent.com/vancenx/mdpic/master/20190406164520.png" alt></p><blockquote><p>如何在MySQL表中删除重复行:<a href="https://www.yiibai.com/mysql/delete-duplicate-rows.html" target="_blank" rel="noopener">https://www.yiibai.com/mysql/delete-duplicate-rows.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 基础- 表操作</title>
      <link href="/2019/04/04/mysql-ji-chu-biao-cao-zuo/"/>
      <url>/2019/04/04/mysql-ji-chu-biao-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="1-MySQL表数据类型"><a href="#1-MySQL表数据类型" class="headerlink" title="1.MySQL表数据类型"></a>1.MySQL表数据类型</h2><p>MySQL中定义数据字段的类型对你数据库的优化是非常重要的。</p><p>MySQL支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。</p><blockquote><p>参考：<a href="http://www.runoob.com/mysql/mysql-data-types.html" target="_blank" rel="noopener">http://www.runoob.com/mysql/mysql-data-types.html</a></p></blockquote><h2 id="2-用SQL语句创建表"><a href="#2-用SQL语句创建表" class="headerlink" title="2.用SQL语句创建表"></a>2.用SQL语句创建表</h2><p>创建MySQL数据表需要以下信息：</p><ul><li>表名</li><li>表字段名</li><li>定义每个表字段</li></ul><p>以下为创建MySQL数据表的SQL通用语法：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name <span class="token punctuation">(</span>column_name column_type<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>约束条件：</p><ul><li>NOT NULL(非空)</li><li>AUTO_INCREMENT(自增长)</li><li>DEFAULT(默认值)</li><li>UNIQUE(唯一)</li><li>PRIMARY KEY(主键)</li><li>FOREIGN KEY(外键)</li></ul><blockquote><p>参考：<a href="https://www.jianshu.com/p/4d09d98e87da" target="_blank" rel="noopener">https://www.jianshu.com/p/4d09d98e87da</a></p></blockquote><h2 id="3-用SQL语句向表中添加数据"><a href="#3-用SQL语句向表中添加数据" class="headerlink" title="3.用SQL语句向表中添加数据"></a>3.用SQL语句向表中添加数据</h2><p>以下为向MySQL数据表插入数据通用的 <strong>INSERT INTO</strong> SQL语法：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name <span class="token punctuation">(</span> field1<span class="token punctuation">,</span> field2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>fieldN <span class="token punctuation">)</span>                       <span class="token keyword">VALUES</span>                       <span class="token punctuation">(</span> value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>valueN <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果数据是字符型，必须使用单引号或者双引号，如：”value”。</p><p>如果所有的列都要添加数据可以不规定列进行添加数据：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name                       <span class="token keyword">VALUES</span>                       <span class="token punctuation">(</span> value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>valueN <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="4-用SQL语句删除数据"><a href="#4-用SQL语句删除数据" class="headerlink" title="4.用SQL语句删除数据"></a>4.用SQL语句删除数据</h2><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>删除记录</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name <span class="token punctuation">[</span><span class="token keyword">WHERE</span> Clause<span class="token punctuation">]</span></code></pre><ul><li>如果没有指定 WHERE 子句，MySQL 表中的所有记录将被删除。</li><li>你可以在 WHERE 子句中指定任何条件</li><li>您可以在单个表中一次性删除记录。</li></ul><h3 id="DROP"><a href="#DROP" class="headerlink" title="DROP"></a>DROP</h3><p>删除表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> table_name <span class="token punctuation">;</span></code></pre><h3 id="TRUNCATE"><a href="#TRUNCATE" class="headerlink" title="TRUNCATE"></a>TRUNCATE</h3><p>删除表数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> table_name <span class="token punctuation">;</span></code></pre><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>delete 和 truncate 仅仅删除表数据，drop 连表数据和表结构一起删除，打个比方，delete 是单杀，truncate 是团灭，drop 是把电脑摔了。</li><li>delete 是 DML 语句，操作完以后如果没有不想提交事务还可以回滚，truncate 和 drop 是 DDL 语句，操作完马上生效，不能回滚，打个比方，delete 是发微信说分手，后悔还可以撤回，truncate 和 drop 是直接扇耳光说滚，不能反悔。</li><li>执行的速度上，<strong>drop&gt;truncate&gt;delete</strong>，打个比方，drop 是神舟火箭，truncate 是和谐号动车，delete 是自行车。</li></ul><h2 id="5-用SQL语句修改表"><a href="#5-用SQL语句修改表" class="headerlink" title="5.用SQL语句修改表"></a>5.用SQL语句修改表</h2><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><p>修改或更新 MySQL 中的数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> table_name <span class="token keyword">SET</span> field1<span class="token operator">=</span>new<span class="token operator">-</span>value1<span class="token punctuation">,</span> field2<span class="token operator">=</span>new<span class="token operator">-</span>value2<span class="token punctuation">[</span><span class="token keyword">WHERE</span> Clause<span class="token punctuation">]</span></code></pre><ul><li>你可以同时更新一个或多个字段。</li><li>你可以在 WHERE 子句中指定任何条件。</li><li>你可以在一个单独表中同时更新数据。</li></ul><h3 id="ALTER"><a href="#ALTER" class="headerlink" title="ALTER"></a>ALTER</h3><ul><li><p>删除列</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> table_name <span class="token keyword">DROP</span> 【列名称】</code></pre></li><li>增加列<pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> table_name <span class="token keyword">ADD</span> 【列名称】 <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">'注释说明'</span></code></pre></li><li>重命名列<pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> table_name CHANGE 【列名称】【新列名称】 <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>  <span class="token keyword">COMMENT</span> <span class="token string">'注释说明'</span></code></pre><h2 id="6-MySQL常用技巧"><a href="#6-MySQL常用技巧" class="headerlink" title="6.MySQL常用技巧"></a>6.MySQL常用技巧</h2></li><li>MySQL行计数：如何在MySQL中获取表中的行数？</li><li>MySQL比较两个表</li><li>如何在MySQL中找到重复的值</li><li>如何删除MySQL中的重复行</li><li>MySQL变量</li><li>……</li></ul><blockquote><p>参考：<a href="https://www.yiibai.com/mysql/mysqltips.html" target="_blank" rel="noopener">https://www.yiibai.com/mysql/mysqltips.html</a></p></blockquote><h2 id="项目三：超过5名学生的课（难度：简单）"><a href="#项目三：超过5名学生的课（难度：简单）" class="headerlink" title="项目三：超过5名学生的课（难度：简单）"></a>项目三：超过5名学生的课（难度：简单）</h2><p>创建如下所示的courses 表 ，有: student (学生) 和 class (课程)。</p><p>例如,表:</p><p>+———+————+</p><p>| student | class      |</p><p>+———+————+‘’</p><p>| A       | Math       |</p><p>| B      | English    |</p><p>| C       | Math       |</p><p>| D       | Biology    |</p><p>| E       | Math       |</p><p>| F       | Computer   |</p><p>| G       | Math       |</p><p>| H       | Math       |</p><p>| I       | Math       |</p><p>| A      | Math       |</p><p>+———+————+</p><p>编写一个 SQL 查询，列出所有超过或等于5名学生的课。</p><p>应该输出:</p><p>+———+</p><p>| class   |</p><p>+———+</p><p>| Math    |</p><p>+———+</p><p>Note:</p><p>学生在每个课中不应被重复计算。</p><ol><li>创建表<pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> courses<span class="token punctuation">(</span> student char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  class <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>插入数据<pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> courses<span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'Math'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'English'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'Math'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'Biology'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'Math'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'Computer'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token string">'Math'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'Math'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'Math'</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'Math'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>查询语句<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> class<span class="token keyword">FROM</span> courses<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> class <span class="token keyword">HAVING</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> student<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">;</span></code></pre>运行结果：</li></ol><p><img src="https://raw.githubusercontent.com/vancenx/mdpic/master/20190404233907.png" alt></p><h2 id="项目四：交换工资（难度：简单）"><a href="#项目四：交换工资（难度：简单）" class="headerlink" title="项目四：交换工资（难度：简单）"></a>项目四：交换工资（难度：简单）</h2><p>项目四：交换工资（难度：简单）</p><p>创建一个 salary表，如下所示，有m=男性 和 f=女性的值 。</p><p>例如:</p><p>| id | name | sex | salary |</p><p>|—-|——|—–|——–|</p><p>| 1  | A    | m   | 2500   |</p><p>| 2  | B    | f   | 1500   |</p><p>| 3  | C    | m   | 5500   |</p><p>| 4  | D    | f   | 500    |</p><p>交换所有的 f 和 m 值(例如，将所有 f 值更改为 m，反之亦然)。要求使用一个更新查询，并且没有中间临时表。</p><p>运行你所编写的查询语句之后，将会得到以下表:</p><p>| id | name | sex | salary |</p><p>|—-|——|—–|——–|</p><p>| 1  | A    | f  | 2500   |</p><p>| 2  | B    | m   | 1500   |</p><p>| 3  | C    | f   | 5500   |</p><p>| 4  | D    | m   | 500    |</p><ol><li>创建表<pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> salary<span class="token punctuation">(</span>  id <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>  name char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  sex char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  salary <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>插入数据<pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> salary <span class="token punctuation">(</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> salary <span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token number">2500</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">1500</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token number">5500</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token number">500</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>查询语句<pre class=" language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> salary<span class="token keyword">SET</span> sex <span class="token operator">=</span> <span class="token keyword">CASE</span>  <span class="token keyword">WHEN</span> sex <span class="token operator">=</span> <span class="token string">'f'</span> <span class="token keyword">THEN</span> <span class="token string">'m'</span> <span class="token keyword">ELSE</span> <span class="token string">'f'</span><span class="token keyword">END</span><span class="token punctuation">;</span></code></pre>运行结果：<br><img src="https://raw.githubusercontent.com/vancenx/mdpic/master/20190404234629.png" alt></li></ol><blockquote><p>CASE语句：<a href="https://www.yiibai.com/mysql/case-statement.html" target="_blank" rel="noopener">https://www.yiibai.com/mysql/case-statement.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 基础-查询语句</title>
      <link href="/2019/04/02/mysql-ji-chu-cha-xun-yu-ju/"/>
      <url>/2019/04/02/mysql-ji-chu-cha-xun-yu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="1-导入数据库"><a href="#1-导入数据库" class="headerlink" title="1.导入数据库"></a>1.导入数据库</h2><blockquote><p>参考教程：<a href="https://www.yiibai.com/mysql/how-to-load-sample-database-into-mysql-database-server.html" target="_blank" rel="noopener">https://www.yiibai.com/mysql/how-to-load-sample-database-into-mysql-database-server.html</a>  </p></blockquote><h2 id="2-SQL是什么？MySQL是什么？"><a href="#2-SQL是什么？MySQL是什么？" class="headerlink" title="2.SQL是什么？MySQL是什么？"></a>2.SQL是什么？MySQL是什么？</h2><ul><li><p>SQL代表结构化查询语言(<strong>Structured Query Language</strong>)。SQL是用于访问数据库的标准化语言。</p></li><li><p>MySQL是一个数据库管理系统，也是一个关系数据库。</p></li></ul><h2 id="3-查询语句-SELECT-FROM"><a href="#3-查询语句-SELECT-FROM" class="headerlink" title="3.查询语句 SELECT FROM"></a>3.查询语句 SELECT FROM</h2><ul><li>语句解释：SELECT 语句用于从表中选取数据。结果被存储在一个结果表中（称为结果集）。</li><li>去重语句：关键词 DISTINCT 用于返回唯一不同的值。语法为： SELECT DISTINCT 列名称 FROM 表名称</li><li>前N个语句：使用 LIMIT 属性来设定返回的记录数。</li><li>CASE…END判断语句：检查表达式的值与一组唯一值的匹配。</li></ul><h2 id="4-筛选语句-WHERE"><a href="#4-筛选语句-WHERE" class="headerlink" title="4.筛选语句 WHERE"></a>4.筛选语句 WHERE</h2><ul><li><p>语句解释：WHERE子句允许根据指定的过滤表达式或条件来指定要选择的行。</p></li><li><p>运算符：<br>算术运算符<br>比较运算符<br>逻辑运算符<br>位运算符</p><blockquote><p>参考：<a href="http://www.runoob.com/mysql/mysql-operator.html" target="_blank" rel="noopener">http://www.runoob.com/mysql/mysql-operator.html</a></p></blockquote></li></ul><h2 id="5-分组语句-GROUP-BY"><a href="#5-分组语句-GROUP-BY" class="headerlink" title="5.分组语句 GROUP BY"></a>5.分组语句 GROUP BY</h2><ul><li>聚集函数:count() 计数，sum() 求和，avg() 平均数，max() 最大值，min() 最小值等</li><li>语句解释：GROUP表示分组，BY后面写字段名，就表示根据哪个字段进行分组，GROUP BY必须得配合聚合函数来用，分组之后你可以计数（COUNT），求和（SUM），求平均数（AVG）等。</li><li>HAVING子句：提到GROUP BY 我们就不得不提到HAVING，HAVING相当于条件筛选，但它与WHERE筛选不同，HAVING是对于GROUP BY对象进行筛选。</li></ul><h2 id="6-排序语句-ORDER-BY"><a href="#6-排序语句-ORDER-BY" class="headerlink" title="6.排序语句 ORDER BY"></a>6.排序语句 ORDER BY</h2><ul><li>语句解释: SELECT prod_name FROM Products ORDER BY prod_name（对prod_name列以字母顺序排序数据）</li><li>正序、逆序：DESC降序，默认升序（ASC）</li></ul><h2 id="7-函数"><a href="#7-函数" class="headerlink" title="7.函数"></a>7.函数</h2><ul><li>日期函数</li><li>数字函数</li><li>字符串函数<blockquote><p>参考：<a href="http://www.runoob.com/mysql/mysql-functions.html" target="_blank" rel="noopener">http://www.runoob.com/mysql/mysql-functions.html</a></p></blockquote></li></ul><h2 id="8-SQL注释"><a href="#8-SQL注释" class="headerlink" title="8.SQL注释"></a>8.SQL注释</h2><ul><li>SQL语句中的单行注释使用 --</li><li>SQL语句中的多行注释采用 /*…*/</li></ul><h2 id="9-SQL代码规范"><a href="#9-SQL代码规范" class="headerlink" title="9.SQL代码规范"></a>9.SQL代码规范</h2><ul><li>[SQL编程格式的优化建议] <a href="https://zhuanlan.zhihu.com/p/27466166" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/27466166</a></li><li>[SQL Style Guide] <a href="https://www.sqlstyle.guide/" target="_blank" rel="noopener">https://www.sqlstyle.guide/</a></li></ul><p>可以使用 Navicat 管理数据库，打开「新建查询」编写 MySQL 语句，有语法提示、高亮、一键美化等友好功能。</p><h2 id="项目一：查找重复的电子邮箱（难度：简单）"><a href="#项目一：查找重复的电子邮箱（难度：简单）" class="headerlink" title="项目一：查找重复的电子邮箱（难度：简单）"></a>项目一：查找重复的电子邮箱（难度：简单）</h2><p>创建 email表，并插入如下三行数据<br>+—-+———+<br>| Id | c   |<br>+—-+———+<br>| 1  | <a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a> |<br>| 2  | <a href="mailto:c@d.com" target="_blank" rel="noopener">c@d.com</a> |<br>| 3  | <a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a> |<br>+—-+———+</p><p>编写一个 SQL 查询，查找 Email 表中所有重复的电子邮箱。<br>根据以上输入，你的查询应返回以下结果：<br>+———+<br>| Email   |<br>+———+<br>| <a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a> |<br>+———+<br>说明：所有电子邮箱都是小写字母。</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><ol><li>创建表</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> email <span class="token punctuation">(</span>ID <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>Email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>插入数据</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> email <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'a@b.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> email <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'c@d.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> email <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'a@b.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>查询语句</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> Email <span class="token keyword">FROM</span> email <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> Email <span class="token keyword">HAVING</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>Email<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span>；</code></pre><p>运行结果：</p><p><img src="https://raw.githubusercontent.com/vancenx/mdpic/master/20190404204857.png" alt></p><h2 id="项目二：查找大国（难度：简单）"><a href="#项目二：查找大国（难度：简单）" class="headerlink" title="项目二：查找大国（难度：简单）"></a>项目二：查找大国（难度：简单）</h2><p>创建如下 World 表<br>+—————–+————+————+————–+—————+<br>| name            | continent  | area       | population   | gdp           |<br>+—————–+————+————+————–+—————+<br>| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |<br>| Albania         | Europe     | 28748      | 2831741      | 12960000      |<br>| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |<br>| Andorra         | Europe     | 468        | 78115        | 3712000       |<br>| Angola          | Africa     | 1246700    | 20609294     | 100990000     |<br>+—————–+————+————+————–+—————+<br>如果一个国家的面积超过300万平方公里，或者(人口超过2500万并且gdp超过2000万)，那么这<br>编写一个SQL查询，输出表中所有大国家的名称、人口和面积。<br>例如，根据上表，我们应该输出:<br>+————–+————-+————–+<br>| name         | population  | area         |<br>+————–+————-+————–+<br>| Afghanistan  | 25500100    | 652230       |<br>| Algeria      | 37100000    | 2381741      |<br>+————–+————-+————–+</p><ol><li>创建表</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> World <span class="token punctuation">(</span>name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>continent <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>area <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>population <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>gdp <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>插入数据</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> World  <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'Afghanistan'</span><span class="token punctuation">,</span><span class="token string">'Asia'</span><span class="token punctuation">,</span><span class="token number">652230</span><span class="token punctuation">,</span><span class="token number">25500100</span><span class="token punctuation">,</span><span class="token number">20343000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> World   <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'Albania'</span><span class="token punctuation">,</span><span class="token string">'Europe'</span><span class="token punctuation">,</span><span class="token number">28748</span><span class="token punctuation">,</span><span class="token number">2831741</span><span class="token punctuation">,</span><span class="token number">12960000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> World   <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'Algeria'</span><span class="token punctuation">,</span><span class="token string">'Africa'</span><span class="token punctuation">,</span><span class="token number">2381741</span><span class="token punctuation">,</span><span class="token number">37100000</span><span class="token punctuation">,</span><span class="token number">188681000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> World  <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'Andorra'</span><span class="token punctuation">,</span><span class="token string">'Europe'</span><span class="token punctuation">,</span><span class="token number">468</span><span class="token punctuation">,</span><span class="token number">78115</span><span class="token punctuation">,</span><span class="token number">3712000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> World  <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'Angola'</span><span class="token punctuation">,</span><span class="token string">'Africa'</span><span class="token punctuation">,</span><span class="token number">1246700</span><span class="token punctuation">,</span><span class="token number">20609294</span><span class="token punctuation">,</span><span class="token number">100990000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>查询语句<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> population<span class="token punctuation">,</span> area<span class="token keyword">FROM</span> World<span class="token keyword">WHERE</span> area <span class="token operator">></span> <span class="token number">3000000</span> <span class="token operator">OR</span> population <span class="token operator">></span> <span class="token number">25000000</span></code></pre></li></ol><p>运行结果：</p><p><img src="https://raw.githubusercontent.com/vancenx/mdpic/master/20190404205034.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 软件安装及数据库基础</title>
      <link href="/2019/03/31/mysql-ruan-jian-an-zhuang-ji-shu-ju-ku-ji-chu/"/>
      <url>/2019/03/31/mysql-ruan-jian-an-zhuang-ji-shu-ju-ku-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL的安装与配置"><a href="#MySQL的安装与配置" class="headerlink" title="MySQL的安装与配置"></a>MySQL的安装与配置</h2><blockquote><p>参考教程 <a href="http://www.runoob.com/mysql/mysql-install.html" target="_blank" rel="noopener">http://www.runoob.com/mysql/mysql-install.html</a>  </p></blockquote><p><strong>注意事项：</strong></p><ol><li>若使用浏览器下载安装包时速度过慢，可使用多线程下载工具（如 IDM），或者去国内开源镜像站下载（如网易开源镜像站）</li><li>使用记事本创建 my.ini 配置文件（创建完之后把后缀名改为.ini）；设置mysql的安装目录时，basedir=解压后的文件夹目录，并使用双反斜杠(如 basedir=C:\\web\\mysql-8.0.11)</li><li><p>启动 MySQL 数据库时必须以管理员身份打开 cmd 或者Windows PowerShell</p></li><li><p>初始化数据库之后得到的初始密码记得复制保存</p></li></ol><p>安装成功效果如图：</p><p><img src="https://raw.githubusercontent.com/vancenx/mdpic/master/20190331185909.png" alt></p><p>登录成功效果如图：</p><p><img src="https://raw.githubusercontent.com/vancenx/mdpic/master/20190331190031.png" alt></p><h2 id="数据库基础知识"><a href="#数据库基础知识" class="headerlink" title="数据库基础知识"></a>数据库基础知识</h2><ul><li><strong>数据库</strong>（Database）是按照数据结构来组织、存储和管理数据的仓库。</li><li><p><strong>关系型数据库</strong>，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。特点如下：</p><ol><li>数据以表格的形式出现</li><li>每行为各种记录名称</li><li>每列为记录名称所对应的数据域</li><li>许多的行和列组成一张表单</li><li>若干的表单组成database</li></ol></li><li><p><strong>数据表:</strong> 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。</p></li><li><strong>列:</strong> 一列(数据元素) 包含了相同的数据, 例如邮政编码的数据。</li><li><strong>行：</strong>一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。</li><li><strong>冗余</strong>：存储两倍数据，冗余降低了性能，但提高了数据的安全性。</li><li><strong>主键</strong>：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。</li><li><strong>外键：</strong>外键用于关联两个表。</li><li><strong>视图</strong>：数据库中的视图是一个虚拟表，但它同真实表一样，包含一系列带有名称的行和列数据。行和列数据来自由定义视图查询所引用的表，并且在应用视图时动态生成。</li><li><strong>存储过程</strong>：是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象。存储过程是为了完成特定功能的SQL语句集，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数(需要时)来调用执行。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/03/29/hello-world/"/>
      <url>/2019/03/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
